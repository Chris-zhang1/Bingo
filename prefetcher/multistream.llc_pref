#include "cache.h"
// #include "TableLru.h"
#include "Types.h"


#include <vector>
#include <list>
#include <map>
#include <cassert>

// #include <cstdlib>
// #include <bits/stdc++.h>
using namespace std;
// -----------------------------------------------------------------------------
// Class: MULTISTREAM
// Description:
// This class implements a stream prefetcher. Similar to the IBM
// Power prefetchers. Imported primarily from the stream
// prefetcher in scarab/ringo
// -----------------------------------------------------------------------------
template <class key_t, class value_t>
class lru_table_t {
    public:
        //table.h中的成员
        enum operation { T_INSERT, T_REPLACE, T_READ, T_UPDATE, T_INVALIDATE };
        enum policy_value_t {
            POLICY_HIGH = 0,
            POLICY_BIMODAL = 1,
            POLICY_LOW = 2  
        };
        // list of node containers
        struct ListNode {
            uint32 index;
            ListNode *prev;
            ListNode *next;
        };
        struct entry {
            bool valid;
            uint32 index;
            key_t key;
            value_t value;
            // default constructor
            entry() {
            valid = false;
            }
            // invalid entry constructor from index
            entry(uint32 eindex) {
            valid = false;
            index = eindex;
            }
            // construct entry from index, key and value
            entry(uint32 eindex, key_t ekey, value_t evalue) {
            valid = true;
            index = eindex;
            key = ekey;
            value = evalue;
            }
        };    
        // -------------------------------------------------------------------------
        // Macros
        // -------------------------------------------------------------------------

        void _push_back(uint32_t index) {
            if (_head == NULL) {
                _head = _tail = _nodes[index];
            }
            else {
                _tail -> next = _nodes[index];
                _nodes[index] -> prev = _tail;
                _tail = _nodes[index];
            }
        }

        uint32 _pop_front() {
            ListNode *node = _head;
            _head = _head -> next;
            if (_head != NULL) {
                _head -> prev = NULL;
            }
            node -> prev = NULL;
            node -> next = NULL;
            return node -> index;
        }

        void _remove(uint32_t index) {
            ListNode *node = _nodes[index];
            if (node -> prev != NULL) {
                node -> prev -> next = node -> next;
            }
            else {
                _head = _head -> next;
            }
            if (node -> next != NULL) {
                node -> next -> prev = node -> prev;
            }
            else {
                _tail = _tail -> prev;
            }
            node -> next = node -> prev = NULL;
        }

        // -------------------------------------------------------------------------
        // Function to get a free entry
        // -------------------------------------------------------------------------

        uint32 GetFreeEntry() {
            if (!_freeList.empty()) {
                uint32 index = _freeList.front();
                _freeList.pop_front();
                return index;
            }
            return _size;
        }

        // ----------------------------------------------------------------------------
        // Function to search for a key, basically returns the index if entry is valid
        // ----------------------------------------------------------------------------

        uint32 SearchForKey(key_t key) {
            if (_indexIsKey) {
              assert(key < _size && key >= 0);
              if (_table[key].valid)
                return key;
            }
            else {
              if (_keyIndex.find(key) != _keyIndex.end()) 	// end is returned if key is not found
                return _keyIndex[key];				// return the value (index) in the map _keyIndex
            }
            return _size;
        }

        // -----------------------------------------------------------------------------
        // Function to insert an entry
        // -------------------------------------------------------------------------
            
        void InsertEntry(entry e) {
            if (!_indexIsKey)
              _keyIndex.insert(make_pair(e.key, e.index));	// make_pair is a part of std namespace
            else 
              assert(e.key < _size && e.key >= 0);
            _table[e.index] = e;
        }
        
        // replace e1 with e2
        void ReplaceEntry(entry e1, entry e2) {
            if (!_indexIsKey) {
              _keyIndex.erase(e1.key);
              _keyIndex.insert(make_pair(e2.key, e1.index));
            }
            e2.index = e1.index;
            _table[e2.index] = e2;
        }
        // -------------------------------------------------------------------------
        // Invalidate an entry
        // -------------------------------------------------------------------------

        void InvalidateEntry(entry e) {
            if (!_indexIsKey)
              _keyIndex.erase(e.key);
            _table[e.index].valid = false;
            _freeList.push_back(e.index);
        }

        void UpdateReplacementPolicy(uint32 index, operation op, policy_value_t pval) {

            switch(op) {
                
                case T_INSERT:
                _push_back(index);
                break;

                case T_READ:
                _remove(index);
                _push_back(index);
                break;

                case T_UPDATE:
                _remove(index);
                _push_back(index);
                break;

                case T_REPLACE:
                _pop_front();
                _push_back(index);
                break;

                case T_INVALIDATE:
                _remove(index);
                break;
            }
        }

        // -------------------------------------------------------------------------
        // Function to return a replacement index
        // -------------------------------------------------------------------------

        uint32 GetReplacementIndex() {
            assert(_head != NULL);
            return _head -> index;
        }

        // -------------------------------------------------------------------------
        // Constructor for lru_table
        // -------------------------------------------------------------------------

        lru_table_t(uint32_t size) {
            _head = _tail = NULL;
            _table.resize(size);
            _nodes.resize(size);
            for (uint32_t i = 0; i < size; i ++) {
                _nodes[i] = new ListNode;
                _nodes[i] -> index = i;
                _nodes[i] -> next = NULL;
                _nodes[i] -> prev = NULL;
                _freeList.push_back(i);
            }
            _size = size;
            _keyIndex.clear();
            _indexIsKey = false;
        }

        uint32 count() {
            return _size - _freeList.size();
        }

        bool lookup(key_t key) {
            if (SearchForKey(key) != _size)
                return true;
            return false;
        }

        /* this checks if key is already present -> return the corresponding entry
        if not, then insert the entry directly if key is index -> return corr. entry
                insert entry after getting index from freelist -> return corr. entry
        if key is not present and table is full, then replace an entry with entry to be inserted -> return evicted entry
        */
        entry insert(key_t key, value_t value,
                            policy_value_t pval = POLICY_HIGH) {
            uint32 index;

            // check if the key is already present
            if ((index = SearchForKey(key)) != _size)
                return _table[index];						// valid will be true

            // if index is key
            if (_indexIsKey) {
                index = key;
                UpdateReplacementPolicy(index, T_INSERT, pval);			// why do we need it here?
                InsertEntry(entry(index, key, value));
                return entry(index);						// valid will be false
            }

            // check if there is a free slot
            if ((index = GetFreeEntry()) != _size) {
                // update with replacement policy
                UpdateReplacementPolicy(index, T_INSERT, pval);
                // insert the entry and return
                InsertEntry(entry(index, key, value));
                return entry(index);						// valid will be false
            }

            // get a replacement index

            index = GetReplacementIndex();					// implemented by derived class
            UpdateReplacementPolicy(index, T_REPLACE, pval);
            entry evicted = _table[index];
            ReplaceEntry(evicted, entry(index, key, value));
            return evicted;							// valid will be true
        }        

        entry read(key_t key, policy_value_t pval = POLICY_HIGH) {
            uint32 index;
            // check if the element is present
            if ((index = SearchForKey(key)) == _size)
                return entry();
            // update the replacement policy and return
            UpdateReplacementPolicy(index, T_READ, pval);
            return _table[index];
        }

        entry update(key_t key, value_t value,
                            policy_value_t pval = POLICY_HIGH) {
            uint32 index;
            // check if the key is present
            if ((index = SearchForKey(key)) == _size)
                return entry();
            // update replacement policy and return
            _table[index].value = value;
            UpdateReplacementPolicy(index, T_UPDATE, pval);
            return _table[index];
        }
        // -------------------------------------------------------------------------
        // Function to invalidate an entry
        // -------------------------------------------------------------------------

        entry invalidate(key_t key) {
            uint32 index;
            // check if the key is present
            if ((index = SearchForKey(key)) == _size)
                return entry();
            // update replacement policy
            UpdateReplacementPolicy(index, T_INVALIDATE, POLICY_HIGH);
            entry evicted = _table[index];
            InvalidateEntry(evicted);
            return evicted;
        }
        // -------------------------------------------------------------------------
        // Function to get an entry by index
        // -------------------------------------------------------------------------

        entry entry_at_index(uint32 index) {
            assert(index < _size);
            return _table[index];
        }

        // -------------------------------------------------------------------------
        // Function to force replacement
        // -------------------------------------------------------------------------

        entry force_evict() {
            uint32 index = GetReplacementIndex();
            entry evicted = _table[index];
            UpdateReplacementPolicy(index, T_INVALIDATE, POLICY_HIGH);
            InvalidateEntry(evicted);
            return evicted;
        }

        key_t to_be_evicted() {
            uint32 index = GetReplacementIndex();
            return _table[index].key;
        }

        // -------------------------------------------------------------------------
        // operator [] . Provide simple access to value at some key
        // -------------------------------------------------------------------------

        value_t & operator[] (key_t key) {
            uint32 index = SearchForKey(key);
            assert(index != _size);
            return _table[index].value;
        }
        // -------------------------------------------------------------------------
        // Return the entry for a given key
        // -------------------------------------------------------------------------
            
        entry get(key_t key) {
            uint32 index = SearchForKey(key);
            if (index != _size)
            return _table[index];
            else
            return entry();
        }

        // -------------------------------------------------------------------------
        // Destructor
        // -------------------------------------------------------------------------

        ~lru_table_t() {
        for (uint32_t i = 0; i < _size; i ++)
            delete _nodes[i];
        }

    private:
        // array of nodes
        vector <ListNode *> _nodes;
        ListNode *_head;
        ListNode *_tail;

        vector <entry> _table;
        map <key_t, uint32> _keyIndex;
        list <uint32> _freeList;
        bool _indexIsKey;
        uint32 _size;

};

class MULTISTREAM {
    public:
        // 枚举和结构体定义保持不变
        enum StreamDirection { FORWARD = 1, BACKWARD = -1, NONE = 0 };

        struct StreamEntry {
            //分配这个stream entry的地址和指令
            uint64_t allocMissAddress;
            uint64_t ip;
            // cpu ID
            uint32_t appID;
            uint64_t counterVal;
            bool faked;
            // start and end pointers of the stream
            uint64_t sp, ep;
            // last fake
            uint64_t last_demand_v, fake_vp;
            //is the prefetcher trained
            int trainHits;
            bool trained;
            StreamDirection direction;
        };

        MULTISTREAM() : _streamTable(_tableSize) {
            _blockSize = 64;
            _prefetchOnWrite = false;

            // _tableSize = 16;
            _tablePolicy = "lru";
            _trainDistance = 16;
            _numTrains = 2;
            _distance = 24;
            _degree = 4;
            _maxFakeCounter = 16;
            _fake = false;  

            // INITIALIZE_COUNTER(num_prefetches, "Number of prefetches issued");

            _runningIndex = 0;

            _appCounter.resize(2, 0);

            _trainAddrDistance = _trainDistance * _blockSize;
            _prefetchAddrDistance = _distance * _blockSize;
        }
        /**
         * @return A vector of block numbers that should be prefetched.
         */
        // access 接口是champsim自带
        vector<pair<uint64_t, uint32_t>> access(uint32_t cpu, uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type) {
            // // 原有预取器的工作逻辑，这几个请求不会触发预取器
            // if (request -> type == MemoryRequest::WRITE ||
            //     request -> type == MemoryRequest::WRITEBACK ||
            //     request -> type == MemoryRequest::PREFETCH) {
            //     // do nothing
            //     return 0;
            // }    
            // if (!_prefetchOnWrite &&
            //     (request -> type == MemoryRequest::READ_FOR_WRITE)) {
            //     // do nothing
            //     return 0;
            // }
            //相应的cpu访问+1
            _appCounter[cpu] ++;
            
            //化为整块地址开始，此处是全地址
            addr = (addr >> LOG2_BLOCK_SIZE) << LOG2_BLOCK_SIZE;

            lru_table_t<uint32_t, StreamEntry>::entry row;
            // table_t <uint32_t, StreamEntry>::entry row;
            
            bool hit = false;
            uint32_t key;

            //存储发起的预取请求地址，如果没有就返回空列表,这里是champsim在调用operate prefetch需要返回的
            vector<pair<uint64_t, uint32_t>> pred;

            // Check if there is a stream entry matching the address
            for (uint32_t i = 0; i < _tableSize; i ++) {
                // get row i from the stream table
                row = _streamTable.entry_at_index(i);
                // if row is invalid, continue
                if (!row.valid) continue;
                // get the stream entry information
                StreamEntry entry = row.value;
                // if entry is in the training phase
                if (!row.value.trained) {
                    if (llabs(entry.allocMissAddress - addr) < _trainAddrDistance) {
                    // HIT! entry within training scope
                    hit = true;
                    key = row.key;
                    break;
                    }
                }
                // not training phase
                else {
                    if (entry.sp <= addr && entry.ep >= addr) {
                    // HIT! entry within monitor scope
                        hit = true;
                        key = row.key;
                        break;
                    }
                }
            }

            // If there is a stream entry, then update the entry based on
            // the current phase and issue prefetches if necessary
            if (hit) {
                // dummy read to update replacement state
                _streamTable.read(key);
                
                // real read to modify stream entry state
                StreamEntry &entry = _streamTable[key];
                entry.counterVal = _appCounter[entry.appID];
                entry.faked = false;

                // entry not trained yet
                if (!entry.trained) {
                    // forward direction
                    if (entry.allocMissAddress < addr) {
                        switch (entry.direction) {
                        case FORWARD:
                            // same direction.
                            entry.trainHits ++;
                            if (addr > entry.ep) {
                                entry.ep = addr;
                            }
                            break;
                        case BACKWARD:
                        case NONE:
                            // new direction
                            entry.trainHits = 1;
                            entry.direction = FORWARD;
                            entry.ep = addr;
                            break;
                        }
                    }
                    // backward direction
                    else {
                        switch (entry.direction) {
                        case BACKWARD:
                            // same direction.
                            entry.trainHits ++;
                            if (addr < entry.ep) {
                                entry.ep = addr;
                            }
                            break;
                        case FORWARD:
                        case NONE:
                            // new direction
                            entry.trainHits = 1;
                            entry.direction = BACKWARD;
                            entry.ep = addr;
                            break;
                        }
                    }

                    // Upgrade to trained?
                    if (entry.trainHits >= _numTrains)
                    entry.trained = true;
                }

                // entry trained
                if (entry.trained) {
                    // Issue prefetches

                    // update the request entry
                    // 这个原有prefetch_line函数中就有记录
                    // 感觉这两个更新不太需要？
                    // request -> d_prefetched = true;
                    // request -> d_prefID = row.index;

                    int32_t numPrefetches = 0;

                    // start points to current demand
                    // 把这个entry的起始指针指向当前地址
                    entry.sp = addr;
                    
                    // determine number of prefetches to issue
                    // 发起的最大预取的个数
                    int32_t  maxPrefetches = 0;
                    if (entry.direction == FORWARD) {
                        uint64_t maxAddress = entry.sp + (_prefetchAddrDistance + _blockSize);
                        maxPrefetches = (maxAddress - entry.ep) / _blockSize;
                    }
                    else {
                        uint64_t minAddress = entry.sp - (_prefetchAddrDistance + _blockSize);
                        maxPrefetches = (entry.ep - minAddress) / _blockSize;
                    }
                    numPrefetches = (maxPrefetches < _degree ? maxPrefetches : _degree);

                    
                    for (int32_t i = 0; i < numPrefetches; i ++) {
                        entry.ep += (entry.direction * _blockSize);
                        //同时传回预取地址和prefID
                        pred.push_back(make_pair(entry.ep, row.index));
                        //还未实现
                        // prefetch -> prefetcherID = row.index;
                    }

                    // ADD_TO_COUNTER(num_prefetches, numPrefetches);

                    // issue fake reads
                    int32_t numFakes;
                    addr_t vcurrent;
                    //关于fake的部分删除了

                    entry.last_demand_v = addr;
                    
                    if (entry.direction == FORWARD &&
                        (entry.ep - entry.sp) > _prefetchAddrDistance) {
                    entry.sp = entry.ep - _prefetchAddrDistance;
                    }
                    else if (entry.direction == BACKWARD &&
                            (entry.sp - entry.ep) > _prefetchAddrDistance) {
                    entry.sp = entry.ep + _prefetchAddrDistance;
                    }
                }

                // Remove redundant stream entry
                for (uint32_t i = 0; i < _tableSize; i ++) {
                    row = _streamTable.entry_at_index(i);
                    if (!row.valid) continue;
                    if (row.key == key) continue;

                    if (((entry.direction == FORWARD) &&
                        ((row.value.sp <= entry.ep && row.value.sp >= entry.sp) ||
                        (row.value.ep <= entry.ep && row.value.ep >= entry.sp))) ||
                        ((entry.direction == BACKWARD) &&
                        ((row.value.sp <= entry.sp && row.value.sp >= entry.ep) ||
                        (row.value.ep <= entry.sp && row.value.ep >= entry.ep)))) {
                    _streamTable.invalidate(row.key);
                    }
                }
            }

            // If there is no stream entry, allocate a new stream entry
            else {
            // Create a new stream entry
                StreamEntry entry;
                lru_table_t<uint32_t, StreamEntry>::entry evicted;
                // table_t <uint32_t, StreamEntry>::entry evicted;
                entry.allocMissAddress = addr;
                entry.ip = ip;
                entry.appID = cpu;
                entry.counterVal = _appCounter[entry.appID];
                entry.sp = addr;
                entry.ep = addr;
                entry.last_demand_v = addr;
                entry.fake_vp = addr;
                entry.trainHits = 0;
                entry.trained = false;
                entry.direction = NONE;
                evicted = _streamTable.insert(_runningIndex, entry);
                _runningIndex ++;
            }
            return pred;
        }

    private:

        uint32_t _blockSize;
        bool _prefetchOnWrite;
        
        uint32_t _tableSize = 16;
        string _tablePolicy;
        uint32_t _numTrains;
        uint32_t _trainDistance;
        uint32_t _distance;
        uint32_t _degree;
        uint32_t _maxFakeCounter;
        bool _fake;

        vector<uint64_t> _appCounter;
        // Prefetcher table
        lru_table_t<uint32_t, StreamEntry> _streamTable;

        // Running index, primarily to reuse the generic table implementation
        uint32_t _runningIndex = 0;
        addr_t _trainAddrDistance = _trainDistance * _blockSize;
        addr_t _prefetchAddrDistance = _distance * _blockSize;
        // 声明一个计数器
        // NEW_COUNTER(num_prefetches);

};

// vector<MULTISTREAM> prefetchers;
MULTISTREAM prefetchers;
void CACHE::llc_prefetcher_initialize_(uint32_t cpu) {
    if (cpu!=0)
        return;
    // vector<MULTISTREAM> prefetchers;
    // prefetchers.reserve(NUM_CPUS);
    // for (size_t i = 0; i < NUM_CPUS; i ++) {
    //     prefetchers.emplace_back();  // 使用 MULTISTREAM 的默认构造函数
    // }   
    // prefetchers = vector<MULTISTREAM>(NUM_CPUS, MULTISTREAM());
    MULTISTREAM prefetchers;
}

void CACHE::llc_prefetcher_operate_(uint32_t cpu, uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type) {
    uint64_t block_number = addr >> LOG2_BLOCK_SIZE;
    uint32_t set = get_set(block_number);
    uint32_t way = get_way(block_number, set);
    uint8_t prefetch = block[set][way].prefetch;

    /* check prefetch hit */
    bool prefetch_hit = false;
    if (cache_hit == 1 && prefetch == 1)
        prefetch_hit = true;

    /* check trigger access */
    // 两种情况：1. 未命中，命中预取块；与BOOM实现同步
    bool trigger_access = false;
    if (cache_hit == 0 || prefetch_hit)
        trigger_access = true;

    if (!trigger_access)
        return;

    /* call prefetcher and send prefetches */
    //在原来MULTISTREAM中，使用的是addr，我们这里可以把block_number转换为addr，
    //或者我们在这里直接实现预取过程，不用access调用了，传参麻烦
    // vector<pair<uint64_t, uint32_t>> to_prefetch = prefetchers[cpu].access(cpu, addr, ip, cache_hit, type);
    vector<pair<uint64_t, uint32_t>> to_prefetch = prefetchers.access(cpu, addr, ip, cache_hit, type);
    for (auto &prefetch : to_prefetch) {
        // uint64_t pf_address = pf_block_number << LOG2_BLOCK_SIZE;
        /* champsim automatically ignores prefetches that cross page boundaries */
        stream_prefetch_line(cpu, ip, addr, prefetch.first, FILL_LLC, prefetch.second);
    }
}

void CACHE::llc_prefetcher_cache_fill_(uint32_t cpu, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr) {
    // prefetchers[cpu].cache_fill(addr >> LOG2_BLOCK_SIZE, (bool)prefetch);
}

void CACHE::llc_prefetcher_inform_warmup_complete_() {}

void CACHE::llc_prefetcher_inform_roi_complete_(uint32_t cpu) {}

void CACHE::llc_prefetcher_roi_stats_(uint32_t cpu) {}

void CACHE::llc_prefetcher_final_stats_(uint32_t cpu) {}
